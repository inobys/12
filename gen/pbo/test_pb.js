// source: test.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.mb.PingMsg', null, global);
goog.exportSymbol('proto.mb.StreamPoint', null, global);
goog.exportSymbol('proto.mb.StreamRequest', null, global);
goog.exportSymbol('proto.mb.StreamResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mb.PingMsg = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mb.PingMsg, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mb.PingMsg.displayName = 'proto.mb.PingMsg';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mb.StreamPoint = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mb.StreamPoint, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mb.StreamPoint.displayName = 'proto.mb.StreamPoint';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mb.StreamRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mb.StreamRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mb.StreamRequest.displayName = 'proto.mb.StreamRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mb.StreamResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mb.StreamResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mb.StreamResponse.displayName = 'proto.mb.StreamResponse';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mb.PingMsg.prototype.toObject = function(opt_includeInstance) {
  return proto.mb.PingMsg.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mb.PingMsg} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mb.PingMsg.toObject = function(includeInstance, msg) {
  var f, obj = {
    no: jspb.Message.getFieldWithDefault(msg, 1, 0),
    nameFirst: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mb.PingMsg}
 */
proto.mb.PingMsg.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mb.PingMsg;
  return proto.mb.PingMsg.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mb.PingMsg} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mb.PingMsg}
 */
proto.mb.PingMsg.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setNo(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setNameFirst(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mb.PingMsg.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mb.PingMsg.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mb.PingMsg} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mb.PingMsg.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNo();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getNameFirst();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional int32 no = 1;
 * @return {number}
 */
proto.mb.PingMsg.prototype.getNo = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.mb.PingMsg} returns this
 */
proto.mb.PingMsg.prototype.setNo = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string name_first = 2;
 * @return {string}
 */
proto.mb.PingMsg.prototype.getNameFirst = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.mb.PingMsg} returns this
 */
proto.mb.PingMsg.prototype.setNameFirst = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of PingMsg as accepted by the `fromObject` method.
 * @record
 */
proto.mb.PingMsg.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.no;

  /** @type {?|undefined} */
  this.nameFirst;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.mb.PingMsg.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.mb.PingMsg}
 */
proto.mb.PingMsg.fromObject = function(obj) {
  var msg = new proto.mb.PingMsg();
  obj.no != null && jspb.Message.setField(msg, 1, obj.no);
  obj.nameFirst != null && jspb.Message.setField(msg, 2, obj.nameFirst);
  return msg;
};
}




if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mb.StreamPoint.prototype.toObject = function(opt_includeInstance) {
  return proto.mb.StreamPoint.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mb.StreamPoint} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mb.StreamPoint.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    value: jspb.Message.getFieldWithDefault(msg, 2, 0),
    ping: (f = msg.getPing()) && proto.mb.PingMsg.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mb.StreamPoint}
 */
proto.mb.StreamPoint.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mb.StreamPoint;
  return proto.mb.StreamPoint.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mb.StreamPoint} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mb.StreamPoint}
 */
proto.mb.StreamPoint.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setValue(value);
      break;
    case 3:
      var value = new proto.mb.PingMsg;
      reader.readMessage(value,proto.mb.PingMsg.deserializeBinaryFromReader);
      msg.setPing(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mb.StreamPoint.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mb.StreamPoint.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mb.StreamPoint} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mb.StreamPoint.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getValue();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getPing();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.mb.PingMsg.serializeBinaryToWriter
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.mb.StreamPoint.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.mb.StreamPoint} returns this
 */
proto.mb.StreamPoint.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int64 value = 2;
 * @return {number}
 */
proto.mb.StreamPoint.prototype.getValue = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.mb.StreamPoint} returns this
 */
proto.mb.StreamPoint.prototype.setValue = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional PingMsg ping = 3;
 * @return {?proto.mb.PingMsg}
 */
proto.mb.StreamPoint.prototype.getPing = function() {
  return /** @type{?proto.mb.PingMsg} */ (
    jspb.Message.getWrapperField(this, proto.mb.PingMsg, 3));
};


/**
 * @param {?proto.mb.PingMsg|undefined} value
 * @return {!proto.mb.StreamPoint} returns this
*/
proto.mb.StreamPoint.prototype.setPing = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.mb.StreamPoint} returns this
 */
proto.mb.StreamPoint.prototype.clearPing = function() {
  return this.setPing(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.mb.StreamPoint.prototype.hasPing = function() {
  return jspb.Message.getField(this, 3) != null;
};


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of StreamPoint as accepted by the `fromObject` method.
 * @record
 */
proto.mb.StreamPoint.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.name;

  /** @type {?|undefined} */
  this.value;

  /** @type {?|undefined} */
  this.ping;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.mb.StreamPoint.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.mb.StreamPoint}
 */
proto.mb.StreamPoint.fromObject = function(obj) {
  var msg = new proto.mb.StreamPoint();
  obj.name != null && jspb.Message.setField(msg, 1, obj.name);
  obj.value != null && jspb.Message.setField(msg, 2, obj.value);
  obj.ping && jspb.Message.setWrapperField(
      msg, 3, proto.mb.PingMsg.fromObject(obj.ping));
  return msg;
};
}




if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mb.StreamRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.mb.StreamRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mb.StreamRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mb.StreamRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    pt: (f = msg.getPt()) && proto.mb.StreamPoint.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mb.StreamRequest}
 */
proto.mb.StreamRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mb.StreamRequest;
  return proto.mb.StreamRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mb.StreamRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mb.StreamRequest}
 */
proto.mb.StreamRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.mb.StreamPoint;
      reader.readMessage(value,proto.mb.StreamPoint.deserializeBinaryFromReader);
      msg.setPt(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mb.StreamRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mb.StreamRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mb.StreamRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mb.StreamRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPt();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.mb.StreamPoint.serializeBinaryToWriter
    );
  }
};


/**
 * optional StreamPoint pt = 1;
 * @return {?proto.mb.StreamPoint}
 */
proto.mb.StreamRequest.prototype.getPt = function() {
  return /** @type{?proto.mb.StreamPoint} */ (
    jspb.Message.getWrapperField(this, proto.mb.StreamPoint, 1));
};


/**
 * @param {?proto.mb.StreamPoint|undefined} value
 * @return {!proto.mb.StreamRequest} returns this
*/
proto.mb.StreamRequest.prototype.setPt = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.mb.StreamRequest} returns this
 */
proto.mb.StreamRequest.prototype.clearPt = function() {
  return this.setPt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.mb.StreamRequest.prototype.hasPt = function() {
  return jspb.Message.getField(this, 1) != null;
};


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of StreamRequest as accepted by the `fromObject` method.
 * @record
 */
proto.mb.StreamRequest.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.pt;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.mb.StreamRequest.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.mb.StreamRequest}
 */
proto.mb.StreamRequest.fromObject = function(obj) {
  var msg = new proto.mb.StreamRequest();
  obj.pt && jspb.Message.setWrapperField(
      msg, 1, proto.mb.StreamPoint.fromObject(obj.pt));
  return msg;
};
}




if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mb.StreamResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.mb.StreamResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mb.StreamResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mb.StreamResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    pt: (f = msg.getPt()) && proto.mb.StreamPoint.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mb.StreamResponse}
 */
proto.mb.StreamResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mb.StreamResponse;
  return proto.mb.StreamResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mb.StreamResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mb.StreamResponse}
 */
proto.mb.StreamResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.mb.StreamPoint;
      reader.readMessage(value,proto.mb.StreamPoint.deserializeBinaryFromReader);
      msg.setPt(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mb.StreamResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mb.StreamResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mb.StreamResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mb.StreamResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPt();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.mb.StreamPoint.serializeBinaryToWriter
    );
  }
};


/**
 * optional StreamPoint pt = 1;
 * @return {?proto.mb.StreamPoint}
 */
proto.mb.StreamResponse.prototype.getPt = function() {
  return /** @type{?proto.mb.StreamPoint} */ (
    jspb.Message.getWrapperField(this, proto.mb.StreamPoint, 1));
};


/**
 * @param {?proto.mb.StreamPoint|undefined} value
 * @return {!proto.mb.StreamResponse} returns this
*/
proto.mb.StreamResponse.prototype.setPt = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.mb.StreamResponse} returns this
 */
proto.mb.StreamResponse.prototype.clearPt = function() {
  return this.setPt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.mb.StreamResponse.prototype.hasPt = function() {
  return jspb.Message.getField(this, 1) != null;
};


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of StreamResponse as accepted by the `fromObject` method.
 * @record
 */
proto.mb.StreamResponse.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.pt;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.mb.StreamResponse.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.mb.StreamResponse}
 */
proto.mb.StreamResponse.fromObject = function(obj) {
  var msg = new proto.mb.StreamResponse();
  obj.pt && jspb.Message.setWrapperField(
      msg, 1, proto.mb.StreamPoint.fromObject(obj.pt));
  return msg;
};
}

goog.object.extend(exports, proto.mb);
